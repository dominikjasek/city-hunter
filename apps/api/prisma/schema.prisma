generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator dbml {
  provider      = "prisma-dbml-generator"
  // not working though https://github.com/notiz-dev/prisma-dbml-generator/issues/18#issuecomment-1114025514
  mapToDbSchema = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------- User -------------------

model User {
  id              String         @id
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now()) @updatedAt
  email           String         
  firstName       String
  lastName        String
  solvedRiddles   SolvedRiddle[]
  currentRiddle   Riddle?        @relation(fields: [currentRiddleId], references: [id])
  currentRiddleId Int?
  createdPlaces   Place[]

  @@map("users")
}

enum LoginProvider {
  google
}

// ------------------- Place -------------------
model Place {
  id               Int         @id @default(autoincrement())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  name             String
  lat              Float
  lng              Float
  riddlePhotoUrl   String
  solutionPhotoUrl String?
  author           User        @relation(fields: [authorId], references: [id])
  authorId         String
  status           PlaceStatus @default(value: pending)
  riddle           Riddle?

  @@map("places")
}

enum PlaceStatus {
  pending
  accepted
  rejected
}

// ------------------- Riddle -------------------
model Riddle {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  place         Place          @relation(fields: [placeId], references: [id])
  placeId       Int            @unique
  solvedRiddles SolvedRiddle[]
  currentUsers  User[]

  @@map("riddles")
}

// ------------------- SolvedRiddle -------------------
model SolvedRiddle {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  riddle    Riddle   @relation(fields: [riddleId], references: [id])
  riddleId  Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("solved_riddles")
}
